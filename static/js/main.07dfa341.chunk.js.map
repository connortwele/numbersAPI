{"version":3,"sources":["components/Year.js","App.js","serviceWorker.js","index.js"],"names":["Year","state","fact","handleChange","e","setState","target","value","console","log","handleSubmit","preventDefault","props","customTrivia","className","onSubmit","this","type","onChange","Component","App","axios","get","then","res","data","text","handleChangeMath","handleChangeYear","handleChangeDate","number","parseInt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kPAsCeA,E,4MAjCbC,MAAM,CACJC,KAAM,I,EAGVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,KAAME,EAAEE,OAAOC,QAGnBC,QAAQC,IAAIL,EAAEE,OAAOC,MAAO,a,EAG9BG,aAAe,SAACN,GACdA,EAAEO,iBACF,EAAKC,MAAMC,aAAa,EAAKZ,MAAMC,MACnC,EAAKG,SAAS,CACZH,KAAM,M,uDAMJ,OACE,yBAAKY,UAAU,QACb,0BAAMC,SAAUC,KAAKN,cACnB,2BAAOO,KAAK,OAAOC,SAAUF,KAAKb,eAClC,4BAAQc,KAAK,UAAb,gB,GA5BKE,a,gBC2FJC,E,4MAvFbnB,MAAQ,CACNC,KAAM,I,EAeRC,aAAe,WACbkB,IAAMC,IAAI,qCACTC,MAAK,SAAAC,GAEJ,EAAKnB,SAAS,CACZH,KAAMsB,EAAIC,KAAKC,W,EAKrBC,iBAAmB,WACjBN,IAAMC,IAAI,0CACTC,MAAK,SAAAC,GAEJ,EAAKnB,SAAS,CACZH,KAAMsB,EAAIC,KAAKC,W,EAKrBE,iBAAmB,WACjBP,IAAMC,IAAI,0CACTC,MAAK,SAAAC,GAEJ,EAAKnB,SAAS,CACZH,KAAMsB,EAAIC,KAAKC,W,EAKrBG,iBAAmB,WACjBR,IAAMC,IAAI,0CACTC,MAAK,SAAAC,GAEJ,EAAKnB,SAAS,CACZH,KAAMsB,EAAIC,KAAKC,W,EAKrBb,aAAe,SAACiB,GACd,IAAIvB,EAAQwB,SAASD,GACrBT,IAAMC,IAAI,yBAA0Bf,EAAO,iBAC1CgB,MAAK,SAAAC,GAEJ,EAAKnB,SAAS,CACZH,KAAMsB,EAAIC,KAAKC,W,kEA1DD,IAAD,OACjBL,IAAMC,IAAI,sCACTC,MAAK,SAAAC,GAEJ,EAAKnB,SAAS,CACZH,KAAMsB,EAAIC,KAAKC,Y,+BA8DrB,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,kBACb,4BAAQkB,QAAShB,KAAKb,cAAtB,wBACA,4BAAQ6B,QAAShB,KAAKW,kBAAtB,sBACA,4BAAQK,QAAShB,KAAKY,kBAAtB,uBACA,4BAAQI,QAAShB,KAAKa,kBAAtB,sBACEb,KAAKf,MAAMC,KACb,8DACA,kBAAC,EAAD,CAAMW,aAAgBG,KAAKH,qB,GAlFjBM,aCOEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.07dfa341.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\n\nclass Year extends Component{\n\n  state={\n    fact: ''\n}\n\nhandleChange = (e) =>{\n    this.setState({\n        fact: e.target.value\n    })\n\n    console.log(e.target.value, 'this one')\n}\n\n  handleSubmit = (e) =>{\n    e.preventDefault();\n    this.props.customTrivia(this.state.fact)\n    this.setState({\n      fact: ''\n    })\n\n    \n}\n      render(){\n        return (\n          <div className=\"Year\">\n            <form onSubmit={this.handleSubmit}>\n              <input type=\"text\" onChange={this.handleChange}/>\n              <button type=\"submit\">Submit</button>\n            </form>\n          </div>\n        );\n      }\n}\n\nexport default Year;","import React, {Component} from 'react';\nimport Year from './components/Year'\nimport axios from 'axios'\n\n\nclass App extends Component{\n\n  state = {\n    fact: ''\n  }\n\n  componentDidMount(){\n    axios.get('http://numbersapi.com/random/?json')\n    .then(res=>{\n      //console.log(res.data.text)\n      this.setState({\n        fact: res.data.text\n      })\n    })\n  }\n\n\n\n  handleChange = () => {\n    axios.get('http://numbersapi.com/random?json')\n    .then(res=>{\n      //console.log(res.data.text)\n      this.setState({\n        fact: res.data.text\n      })\n    })\n  }\n\n  handleChangeMath = () => {\n    axios.get('http://numbersapi.com/random/math?json')\n    .then(res=>{\n      //console.log(res.data.text)\n      this.setState({\n        fact: res.data.text\n      })\n    })\n  }\n\n  handleChangeYear = () => {\n    axios.get('http://numbersapi.com/random/year?json')\n    .then(res=>{\n      //console.log(res.data.text)\n      this.setState({\n        fact: res.data.text\n      })\n    })\n  }\n\n  handleChangeDate = () => {\n    axios.get('http://numbersapi.com/random/date?json')\n    .then(res=>{\n      //console.log(res.data.text)\n      this.setState({\n        fact: res.data.text\n      })\n    })\n  }\n\n  customTrivia = (number) => {\n    let value = parseInt(number)\n    axios.get('http://numbersapi.com/'+ value +'/trivia/?json')\n    .then(res=>{\n      //console.log(res.data.text)\n      this.setState({\n        fact: res.data.text\n      })\n    })\n    \n  }\n \n\n\nrender(){\n  return (\n    <div className=\"App\">\n      <div className=\"flex-container\">\n        <button onClick={this.handleChange}>Random Number Trivia</button>\n        <button onClick={this.handleChangeMath}>Random Math Trivia</button>\n        <button onClick={this.handleChangeYear}> Random Year Trivia</button>\n        <button onClick={this.handleChangeDate}>Random Date Trivia</button>\n        { this.state.fact }\n        <p>Have a specific number in mind?</p>\n        <Year customTrivia = {this.customTrivia}/>\n      </div> \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}